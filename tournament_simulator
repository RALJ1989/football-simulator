#! python3

import random, decimal
from random import shuffle

# Define 'Team' class, which contains team name and team strength
class Team:
    def __init__(self, name, strength1):
        self.name = name
        self.strength1 = strength1
        self.strengthFactor = 0.3 + (self.strength1 / 7.5)
        self.pl = 0
        self.w = 0
        self.d = 0
        self.l = 0
        self.gf = 0
        self.ga = 0
        self.gd = 0
        self.pts = 0
        self.results = [0, 0, 1.5, 5, 1]
        self.coefficient = 0

    @property
    def formPoints(self):
        return sum(self.results[-5:])
    def formFactor(self):
        return 0.7 + 0.6 * (self.formPoints / 15)
    def lastGameFactor(self):
        return 0.6 + (0.8 if self.results[-1] == 3 else 0.4 if self.results[-1] == 1 else 0)
    def strengthEq(self):
        topCoeff = 55
        topCoeffStrength = 20
        highCoeff = 35
        highCoeffStrength = 15
        lowCoeff = 6
        lowCoeffStrength = 5
        return topCoeffStrength if self.coefficient > topCoeff else \
            (highCoeffStrength + (((self.coefficient - highCoeff)/(topCoeff - highCoeff))*(topCoeffStrength - highCoeffStrength))) \
                if self.coefficient > highCoeff else \
                lowCoeffStrength + (((self.coefficient - lowCoeff)/(highCoeff - lowCoeff))*(highCoeffStrength - lowCoeffStrength))
    def strength2(self):
        return round(2*(self.strength1 + ((self.strengthEq() - self.strength1)/10)), 0)/2

# Define the initial team names and strengths
liverpool = Team("Liverpool", 19)
man_city = Team("Man City", 17)
chelsea = Team("Chelsea", 15)
leicester = Team("Leicester", 13)
man_utd = Team("Man Utd", 14)
wolves = Team("Wolves", 11)
sheffield_utd = Team("Sheffield Utd", 10)
tottenham = Team("Tottenham", 14)
arsenal = Team("Arsenal", 13)
burnley = Team("Burnley", 10)
everton = Team("Everton", 11)
southampton = Team("Southampton", 9)
newcastle = Team("Newcastle", 8)
crystal_palace = Team("Crystal Palace", 8)
west_ham = Team("West Ham", 8)
watford = Team("Watford",7)
# brighton = Team("Brighton", 6)
# bournemouth = Team("Bournemouth", 6)
# aston_villa = Team("Aston Villa", 6)
# norwich = Team("Norwich", 5)

# Define a list of all the teams
teams = [liverpool, man_city, chelsea, leicester, man_utd, wolves, sheffield_utd,
         tottenham, arsenal, burnley, everton, southampton, newcastle, crystal_palace,
         west_ham, watford]
sortTeams = sorted(teams, key=lambda team: (-team.strength1, team.name), reverse=False)

# Sort all teams randomly
random.shuffle(sortTeams)

# Split shuffled teams into groups
groupA = sortTeams[0:4]
groupB = sortTeams[4:8]
groupC = sortTeams[8:12]
groupD = sortTeams[12:16]
allGroups = [groupA, groupB, groupC, groupD]
groupNames = ['Group A', 'Group B', 'Group C', 'Group D']

# Display Groups
groupIndex = 0
for g in allGroups:
    groupTeamNames = []
    print(groupNames[groupIndex] + ': ' + ', '.join(t.name for t in g))
    groupIndex += 1

# Find the max length of team names and define team name column width
sortTeamsString = []
for t in sortTeams:
    sortTeamsString.append(t.name)
maxLength = len(max(sortTeamsString, key=len))
desiredLength = maxLength + 2

# Define the league table layout
leagueHeader = '        | STR | PL  | W   | D   | L   | GF  | GA  | GD  | PTS'

# Define the league table sorting criteria
tableSort = lambda team: (team.pts, (team.gd, (-team.strength1, team.name)))

# Define factors for scoring algorithm
homeAdvFactor = 1.2
awayAdvFactor = 0.8

def random_factor():
    return random.randrange(0, 100)/100

def home_goals(Team):
    return round(random_factor() * homeAdvFactor * Team.strengthFactor * Team.lastGameFactor() * Team.formFactor())

def away_goals(Team):
    return round(random_factor() * awayAdvFactor * Team.strengthFactor * Team.lastGameFactor() * Team.formFactor())

def neutral_goals(Team):
    return round(random_factor() * Team.strengthFactor * Team.lastGameFactor() * Team.formFactor())

def penalty():
    return 1 if random.randrange(0, 100) > 25 else 0

# Define group table format
def groups_table():
    sortedGroupA = sorted(groupA, key=tableSort, reverse=True)
    sortedGroupB = sorted(groupB, key=tableSort, reverse=True)
    sortedGroupC = sorted(groupC, key=tableSort, reverse=True)
    sortedGroupD = sorted(groupD, key=tableSort, reverse=True)
    sortedGroups = [sortedGroupA, sortedGroupB, sortedGroupC, sortedGroupD]
    groupIndex = 0
    for g in sortedGroups:
        print('\n' + str.upper(groupNames[groupIndex]) + ' ' + leagueHeader)
        groupIndex += 1
        for t in g:
            leagueRow = t.name + str(' ')*(desiredLength-len(t.name)) + '| ' + str(t.strength1) + str(' ')*(4-len(str(t.strength1))) \
                        + '| ' + str(t.pl) + str(' ')*(4-len(str(t.pl))) + '| ' + str(t.w) + str(' ')*(4-len(str(t.w))) \
                        + '| ' + str(t.d) + str(' ')*(4-len(str(t.d))) + '| ' + str(t.l) + str(' ')*(4-len(str(t.l))) \
                        + '| ' + str(t.gf) + str(' ')*(4-len(str(t.gf))) + '| ' + str(t.ga) + str(' ')*(4-len(str(t.ga))) \
                        + '| ' + str(t.gd) + str(' ')*(4-len(str(t.gd))) + '| ' + str(t.pts) + str(' ')*(4-len(str(t.pts)))
            print(leagueRow)

# Generate fixtures and scores
matchdays = ['Matchday 1', 'Matchday 2', 'Matchday 3', 'Matchday 4', 'Matchday 5', 'Matchday 6']
matchdayFixtures = [[0, 1, 2, 3], [3, 0, 1, 2], [0, 2, 1, 3], [2, 0, 3, 1], [1, 0, 3, 2], [0, 3, 2, 1]]
matchdayReference = 0
for m in matchdays:
    print('\n' + matchdays[matchdayReference] + ':')
    groupIndex = 0
    for g in allGroups:
        team1 = allGroups[groupIndex][matchdayFixtures[matchdayReference][0]]
        team2 = allGroups[groupIndex][matchdayFixtures[matchdayReference][1]]
        team3 = allGroups[groupIndex][matchdayFixtures[matchdayReference][2]]
        team4 = allGroups[groupIndex][matchdayFixtures[matchdayReference][3]]
        # Fixtures
        print('\n' + groupNames[groupIndex] + ' fixtures:')
        print(team1.name + ' vs ' + team2.name)
        print(team3.name + ' vs ' + team4.name)
        # Scores
        team1goals = home_goals(team1)
        team2goals = home_goals(team2)
        team3goals = home_goals(team3)
        team4goals = home_goals(team4)
        print('\n' + groupNames[groupIndex] + ' scores:')
        print(team1.name + ' ' + str(team1goals) + '-' + str(team2goals) + ' ' + team2.name)
        print(team3.name + ' ' + str(team3goals) + '-' + str(team4goals) + ' ' + team4.name)
        # Update stats
        if team1goals > team2goals:
            team1.pl += 1
            team1.w += 1
            team1.gf += team1goals
            team1.ga += team2goals
            team1.gd += team1goals - team2goals
            team1.pts += 3
            team1.results.append(3)
            team1.coefficient += 3 + (team1goals * 0.5)
            team2.pl += 1
            team2.l += 1
            team2.gf += team2goals
            team2.ga += team1goals
            team2.gd += team2goals - team1goals
            team2.results.append(0)
            team2.coefficient += 1 + (team2goals * 0.5)
        elif team1goals < team2goals:
            team1.pl += 1
            team1.l += 1
            team1.gf += team1goals
            team1.ga += team2goals
            team1.gd += team1goals - team2goals
            team1.results.append(0)
            team1.coefficient += 1 + (team1goals * 0.5)
            team2.pl += 1
            team2.w += 1
            team2.gf += team2goals
            team2.ga += team1goals
            team2.gd += team2goals - team1goals
            team2.pts += 3
            team2.results.append(3)
            team2.coefficient += 3 + (team2goals * 0.5)
        elif team1goals == team2goals:
            team1.pl += 1
            team1.d += 1
            team1.gf += team1goals
            team1.ga += team2goals
            team1.pts += 1
            team1.results.append(1)
            team1.coefficient += 2 + (team1goals * 0.5)
            team2.pl += 1
            team2.d += 1
            team2.gf += team2goals
            team2.ga += team1goals
            team2.pts += 1
            team2.results.append(1)
            team2.coefficient += 2 + (team2goals * 0.5)
        else:
            print('error')
        if team3goals > team4goals:
            team3.pl += 1
            team3.w += 1
            team3.gf += team3goals
            team3.ga += team4goals
            team3.gd += team3goals - team4goals
            team3.pts += 3
            team3.results.append(3)
            team3.coefficient += 3 + (team3goals * 0.5)
            team4.pl += 1
            team4.l += 1
            team4.gf += team4goals
            team4.ga += team3goals
            team4.gd += team4goals - team3goals
            team4.results.append(0)
            team4.coefficient += 1 + (team4goals * 0.5)
        elif team3goals < team4goals:
            team3.pl += 1
            team3.l += 1
            team3.gf += team3goals
            team3.ga += team4goals
            team3.gd += team3goals - team4goals
            team3.results.append(0)
            team3.coefficient += 1 + (team3goals * 0.5)
            team4.pl += 1
            team4.w += 1
            team4.gf += team4goals
            team4.ga += team3goals
            team4.gd += team4goals - team3goals
            team4.pts += 3
            team4.results.append(3)
            team4.coefficient += 3 + (team4goals * 0.5)
        elif team3goals == team4goals:
            team3.pl += 1
            team3.d += 1
            team3.gf += team3goals
            team3.ga += team3goals
            team3.pts += 1
            team3.results.append(1)
            team3.coefficient += 2 + (team3goals * 0.5)
            team4.pl += 1
            team4.d += 1
            team4.gf += team4goals
            team4.ga += team3goals
            team4.pts += 1
            team4.results.append(1)
            team4.coefficient += 2 + (team4goals * 0.5)
        else:
            print('error')
        groupIndex += 1
    matchdayReference += 1

# Final group tables
finalGroupA = sorted(groupA, key=tableSort, reverse=True)
finalGroupB = sorted(groupB, key=tableSort, reverse=True)
finalGroupC = sorted(groupC, key=tableSort, reverse=True)
finalGroupD = sorted(groupD, key=tableSort, reverse=True)
finalGroups = [finalGroupA, finalGroupB, finalGroupC, finalGroupD]

print(groups_table())

# Quarter-final fixtures
qF1 = [finalGroupA[0], finalGroupC[1]]
qF2 = [finalGroupB[0], finalGroupD[1]]
qF3 = [finalGroupC[0], finalGroupA[1]]
qF4 = [finalGroupD[0], finalGroupB[1]]
quarterFinals = [qF1, qF2, qF3, qF4]

quarterFinalNumber = 1
quarterFinalRef = 0
quarterFinalWinners = []
for q in quarterFinals:
    team1 = quarterFinals[quarterFinalRef][0]
    team2 = quarterFinals[quarterFinalRef][1]
    # Fixture
    print('\n' + 'Quarter-final ' + str(quarterFinalNumber) + ':\n' + team1.name + ' vs ' + team2.name)
    # Score
    team1goals = home_goals(team1)
    team2goals = home_goals(team2)
    print(team1.name + ' ' + str(team1goals) + '-' + str(team2goals) + ' ' + team2.name)
    # Update stats
    if team1goals > team2goals:
        team1.results.append(3)
        team2.results.append(0)
        team1.coefficient += 4.5 + (team1goals * 0.75)
        team2.coefficient += 1.5 + (team2goals * 0.75)
        quarterFinalWinners.append(team1)
    elif team1goals < team2goals:
        team1.results.append(0)
        team2.results.append(3)
        team1.coefficient += 1.5 + (team1goals * 0.75)
        team2.coefficient += 4.5 + (team2goals * 0.75)
        quarterFinalWinners.append(team2)
    elif team1goals == team2goals:
        team1.results.append(1)
        team2.results.append(1)
        team1pens = 0
        team2pens = 0
        for i in range(0, 5):
            team1pen = penalty()
            team2pen = penalty()
            if team1pen == 1:
                team1pens += 1
            else:
                continue
            if team2pen == 1:
                team2pens += 1
            else:
                continue
        if team1pens > team2pens:
            print('* ' + team1.name + ' won ' + str(team1pens) + '-' + str(team2pens) + ' on pens')
            team1.coefficient += 3.5 + (team1goals * 0.75)
            team2.coefficient += 2.5 + (team2goals * 0.75)
            quarterFinalWinners.append(team1)
        elif team2pens > team1pens:
            print('* ' + team2.name + ' won ' + str(team2pens) + '-' + str(team1pens) + ' on pens')
            team1.coefficient += 2.5 + (team1goals * 0.75)
            team2.coefficient += 3.5 + (team2goals * 0.75)
            quarterFinalWinners.append(team2)
        else:
            while team1pens == team2pens:
                team1pen = penalty()
                team2pen = penalty()
                if team1pen == 1:
                    team1pens += 1
                else:
                    continue
                if team2pen == 1:
                    team2pens += 1
                else:
                    continue
            if team1pens > team2pens:
                print('* ' + team1.name + ' won ' + str(team1pens) + '-' + str(team2pens) + ' on pens')
                team1.coefficient += 3.5 + (team1goals * 0.75)
                team2.coefficient += 2.5 + (team2goals * 0.75)
                quarterFinalWinners.append(team1)
            elif team2pens > team1pens:
                print('* ' + team2.name + ' won ' + str(team2pens) + '-' + str(team1pens) + ' on pens')
                team1.coefficient += 2.5 + (team1goals * 0.75)
                team2.coefficient += 3.5 + (team2goals * 0.75)
                quarterFinalWinners.append(team2)
    else:
        print('error')
    quarterFinalNumber += 1
    quarterFinalRef += 1

print('\nQuarter-final winners:\n' + ', '.join(w.name for w in quarterFinalWinners))

# Semi-final fixtures
sF1 = [quarterFinalWinners[0], quarterFinalWinners[1]]
sF2 = [quarterFinalWinners[2], quarterFinalWinners[3]]
semiFinals = [sF1, sF2]

semiFinalNumber = 1
semiFinalRef = 0
semiFinalWinners = []
for s in semiFinals:
    team1 = semiFinals[semiFinalRef][0]
    team2 = semiFinals[semiFinalRef][1]
    # Fixture
    print('\n' + 'Semi-final ' + str(semiFinalNumber) + ':\n' + team1.name + ' vs ' + team2.name)
    # Score
    team1goals = neutral_goals(team1)
    team2goals = neutral_goals(team2)
    print(team1.name + ' ' + str(team1goals) + '-' + str(team2goals) + ' ' + team2.name)
    # Update stats
    if team1goals > team2goals:
        team1.results.append(3)
        team2.results.append(0)
        team1.coefficient += 5 + (team1goals * 1)
        team2.coefficient += 2 + (team2goals * 1)
        semiFinalWinners.append(team1)
    elif team1goals < team2goals:
        team1.results.append(0)
        team2.results.append(3)
        team1.coefficient += 2 + (team1goals * 1)
        team2.coefficient += 5 + (team2goals * 1)
        semiFinalWinners.append(team2)
    elif team1goals == team2goals:
        team1.results.append(1)
        team2.results.append(1)
        team1pens = 0
        team2pens = 0
        for i in range(0, 5):
            team1pen = penalty()
            team2pen = penalty()
            if team1pen == 1:
                team1pens += 1
            else:
                continue
            if team2pen == 1:
                team2pens += 1
            else:
                continue
        if team1pens > team2pens:
            print('* ' + team1.name + ' won ' + str(team1pens) + '-' + str(team2pens) + ' on pens')
            team1.coefficient += 4 + (team1goals * 1)
            team2.coefficient += 3 + (team2goals * 1)
            semiFinalWinners.append(team1)
        elif team2pens > team1pens:
            print('* ' + team2.name + ' won ' + str(team2pens) + '-' + str(team1pens) + ' on pens')
            team1.coefficient += 3 + (team1goals * 1)
            team2.coefficient += 4 + (team2goals * 1)
            semiFinalWinners.append(team2)
        else:
            while team1pens == team2pens:
                team1pen = penalty()
                team2pen = penalty()
                if team1pen == 1:
                    team1pens += 1
                else:
                    continue
                if team2pen == 1:
                    team2pens += 1
                else:
                    continue
            if team1pens > team2pens:
                print('* ' + team1.name + ' won ' + str(team1pens) + '-' + str(team2pens) + ' on pens')
                team1.coefficient += 4 + (team1goals * 1)
                team2.coefficient += 3 + (team2goals * 1)
                semiFinalWinners.append(team1)
            elif team2pens > team1pens:
                print('* ' + team2.name + ' won ' + str(team2pens) + '-' + str(team1pens) + ' on pens')
                team1.coefficient += 3 + (team1goals * 1)
                team2.coefficient += 4 + (team2goals * 1)
                semiFinalWinners.append(team2)
    else:
        print('error')
    semiFinalNumber += 1
    semiFinalRef += 1

print('\nSemi-final winners:\n' + ', '.join(w.name for w in semiFinalWinners))

# Final fixture
team1 = semiFinalWinners[0]
team2 = semiFinalWinners[1]

print('\nFinal:\n' + team1.name + ' vs ' + team2.name)

# Final score
team1goals = neutral_goals(team1)
team2goals = neutral_goals(team2)
print(team1.name + ' ' + str(team1goals) + '-' + str(team2goals) + ' ' + team2.name)

finalWinner = []

# Update final stats
if team1goals > team2goals:
    team1.results.append(3)
    team2.results.append(0)
    team1.coefficient += 7 + (team1goals * 2)
    team2.coefficient += 3 + (team2goals * 2)
    finalWinner.append(team1)
elif team1goals < team2goals:
    team1.results.append(0)
    team2.results.append(3)
    team1.coefficient += 3 + (team1goals * 2)
    team2.coefficient += 7 + (team2goals * 2)
    finalWinner.append(team2)
elif team1goals == team2goals:
    team1.results.append(1)
    team2.results.append(1)
    team1pens = 0
    team2pens = 0
    for i in range(0, 5):
        team1pen = penalty()
        team2pen = penalty()
        if team1pen == 1:
            team1pens += 1
        else:
            continue
        if team2pen == 1:
            team2pens += 1
        else:
            continue
    if team1pens > team2pens:
        print('* ' + team1.name + ' won ' + str(team1pens) + '-' + str(team2pens) + ' on pens')
        team1.coefficient += 6 + (team1goals * 2)
        team2.coefficient += 4 + (team2goals * 2)
        finalWinner.append(team1)
    elif team2pens > team1pens:
        print('* ' + team2.name + ' won ' + str(team2pens) + '-' + str(team1pens) + ' on pens')
        team1.coefficient += 4 + (team1goals * 2)
        team2.coefficient += 6 + (team2goals * 2)
        finalWinner.append(team2)
    else:
        while team1pens == team2pens:
            team1pen = penalty()
            team2pen = penalty()
            if team1pen == 1:
                team1pens += 1
            else:
                continue
            if team2pen == 1:
                team2pens += 1
            else:
                continue
        if team1pens > team2pens:
            print('* ' + team1.name + ' won ' + str(team1pens) + '-' + str(team2pens) + ' on pens')
            team1.coefficient += 6 + (team1goals * 2)
            team2.coefficient += 4 + (team2goals * 2)
            finalWinner.append(team1)
        elif team2pens > team1pens:
            print('* ' + team2.name + ' won ' + str(team2pens) + '-' + str(team1pens) + ' on pens')
            team1.coefficient += 4 + (team1goals * 2)
            team2.coefficient += 6 + (team2goals * 2)
            finalWinner.append(team2)
else:
    print('error')

# Print the winner of the final
print('\nFinal winner:\n' + finalWinner[0].name)

# Rank the teams by tournament performance (based on coefficients)
finalTeamsRanking = []
for t in teams:
    finalTeamsRanking.append(t)
finalTeamsRanking = sorted(finalTeamsRanking, key=lambda team: team.coefficient, reverse=True)
print('\nFinal tournament rankings:')
for t in finalTeamsRanking:
    print(t.name, t.coefficient)

# Display the change in strength of each team based on tournament performance
print('\nChanges in strength for next season:')
for t in finalTeamsRanking:
    print(t.name, t.strength2(), t.strength2() - t.strength1)
